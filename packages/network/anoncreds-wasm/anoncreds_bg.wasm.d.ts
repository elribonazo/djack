/* tslint:disable */
/* eslint-disable */
export const memory: WebAssembly.Memory;
export function anoncredsSetDefaultLogger(): number;
export function anoncredsCreateSchema(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): number;
export function anoncredsCreateCredentialDefinition(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number): void;
export function anoncredsCreateCredentialDefinitionCustom(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function anoncredsValidateCredentialDefinitionFromJson(a: number, b: number): void;
export function proverCreateLinkSecret(a: number): void;
export function proverCreateCredentialRequest(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function proverProcessCredential(a: number, b: number, c: number, d: number, e: number): number;
export function proverCreatePresentation(a: number, b: number, c: number, d: number, e: number, f: number): number;
export function generator_new(a: number): void;
export function generator_toBytes(a: number, b: number): void;
export function generator_fromBytes(a: number, b: number, c: number): void;
export function __wbg_signkey_free(a: number): void;
export function signkey_new(a: number): void;
export function signkey_fromSeed(a: number, b: number, c: number): void;
export function signkey_fromBytes(a: number, b: number, c: number): void;
export function signkey_toBytes(a: number, b: number): void;
export function verkey_new(a: number, b: number, c: number): void;
export function verkey_fromBytes(a: number, b: number, c: number): void;
export function verkey_toBytes(a: number, b: number): void;
export function proofofpossession_new(a: number, b: number, c: number): void;
export function __wbg_multisignature_free(a: number): void;
export function multisignature_new(a: number, b: number, c: number): void;
export function multisignature_fromBytes(a: number, b: number, c: number): void;
export function multisignature_toBytes(a: number, b: number): void;
export function __wbg_bls_free(a: number): void;
export function bls_new(): number;
export function bls_sign(a: number, b: number, c: number, d: number): void;
export function bls_verify(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function bls_verifyProofOfPosession(a: number, b: number, c: number, d: number): void;
export function bls_verifyMultiSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_credentialschema_free(a: number): void;
export function credentialschema_new(): number;
export function credentialschema_addAttr(a: number, b: number, c: number): void;
export function __wbg_credentialvalues_free(a: number): void;
export function credentialvalues_addMasterSecret(a: number, b: number, c: number): void;
export function credentialvalues_addKnown(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function credentialvalues_addHidden(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function credentialvalues_addCommitment(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function __wbg_credentialprimarypublickey_free(a: number): void;
export function __wbg_credentialpublickey_free(a: number): void;
export function credentialpublickey_getPrimaryKey(a: number, b: number): void;
export function credentialpublickey_getRevocationKey(a: number, b: number): void;
export function __wbg_credentialrevocationpublickey_free(a: number): void;
export function __wbg_credentialprivatekey_free(a: number): void;
export function __wbg_credentialkeycorrectnessproof_free(a: number): void;
export function __wbg_credentialdefinition_free(a: number): void;
export function __wbg_mastersecret_free(a: number): void;
export function mastersecret_new(a: number): void;
export function nonce_new(a: number): void;
export function __wbg_blindedcredentialsecrets_free(a: number): void;
export function __wbg_credentialsecretsblindingfactors_free(a: number): void;
export function __wbg_blindedcredentialsecretscorrectnessproof_free(a: number): void;
export function __wbg_proverblindedcredentialsecrets_free(a: number): void;
export function __wbg_credentialsignature_free(a: number): void;
export function credentialsignature_extractIndex(a: number, b: number): void;
export function __wbg_signaturecorrectnessproof_free(a: number): void;
export function __wbg_issuedcredential_free(a: number): void;
export function __wbg_issuedcredentialwithrevocation_free(a: number): void;
export function __wbg_revocationpublickey_free(a: number): void;
export function __wbg_revocationprivatekey_free(a: number): void;
export function __wbg_revocationregistry_free(a: number): void;
export function __wbg_revocationregistrydelta_free(a: number): void;
export function revocationregistrydelta_fromParts(a: number, b: number, c: number, d: number, e: number): void;
export function revocationregistrydelta_merge(a: number, b: number, c: number): void;
export function __wbg_revocationtailsgenerator_free(a: number): void;
export function revocationtailsgenerator_count(a: number): number;
export function revocationtailsgenerator_next(a: number, b: number): void;
export function __wbg_simpletailsaccessor_free(a: number): void;
export function simpletailsaccessor_new(a: number, b: number): void;
export function simpletailsaccessor_accessTail(a: number, b: number, c: number): void;
export function witness_new(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function witness_update(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_proof_free(a: number): void;
export function __wbg_subproofrequest_free(a: number): void;
export function subproofrequest_new(): number;
export function subproofrequest_addPredicate(a: number, b: number, c: number, d: number, e: number, f: number): void;
export function __wbg_proofbuilder_free(a: number): void;
export function proofbuilder_new(): number;
export function proofbuilder_addCommonAttribute(a: number, b: number, c: number): void;
export function proofbuilder_addSubProofRequest(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function proofbuilder_finalize(a: number, b: number, c: number): void;
export function __wbg_proofverifier_free(a: number): void;
export function proofverifier_new(): number;
export function proofverifier_addSubProofRequest(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number): void;
export function proofverifier_verify(a: number, b: number, c: number, d: number): void;
export function issuer_newCredentialDefinition(a: number, b: number, c: number, d: number): void;
export function issuer_signCredential(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number): void;
export function issuer_signCredentialWithRevocation(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number, j: number, k: number, l: number, m: number, n: number, o: number, p: number): void;
export function prover_blindedCredentialSecrets(a: number, b: number, c: number, d: number, e: number): void;
export function prover_processCredentialSignature(a: number, b: number, c: number, d: number, e: number, f: number, g: number, h: number, i: number): void;
export function __wbg_ed25519sha512_free(a: number): void;
export function ed25519sha512_new(a: number): void;
export function ed25519sha512_fromSeed(a: number, b: number, c: number): void;
export function ed25519sha512_fromPrivateKey(a: number, b: number, c: number): void;
export function ed25519sha512_getPulicKey(a: number, b: number): void;
export function ed25519sha512_sign(a: number, b: number, c: number, d: number): void;
export function ed25519sha512_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function __wbg_wasmcipherkey_free(a: number): void;
export function ursaencryptor_new(a: number, b: number, c: number): void;
export function ursaencryptor_withKey(a: number, b: number, c: number, d: number, e: number): void;
export function ursaencryptor_encrypt(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ursaencryptor_decrypt(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ecdsasecp256k1sha256_keypair(a: number, b: number): void;
export function ecdsasecp256k1sha256_keypairFromSeed(a: number, b: number, c: number, d: number): void;
export function ecdsasecp256k1sha256_getPublicKey(a: number, b: number, c: number): void;
export function ecdsasecp256k1sha256_sign(a: number, b: number, c: number, d: number, e: number): void;
export function ecdsasecp256k1sha256_verify(a: number, b: number, c: number, d: number, e: number, f: number, g: number): void;
export function ecdsasecp256k1sha256_normalizeS(a: number, b: number, c: number, d: number, e: number): void;
export function ecdsasecp256k1sha256_publicKeyCompressed(a: number, b: number): number;
export function ecdsasecp256k1sha256_publicKeyUnCompressed(a: number, b: number): number;
export function ecdsasecp256k1sha256_parseToPublicKey(a: number, b: number, c: number, d: number): void;
export function ecdhsecp256k1sha256_keypair(a: number, b: number): void;
export function ecdhsecp256k1sha256_keypair_from_seed(a: number, b: number, c: number, d: number): void;
export function ecdhsecp256k1sha256_getPublicKey(a: number, b: number, c: number): void;
export function ecdhsecp256k1sha256_computeSharedSecret(a: number, b: number, c: number, d: number): void;
export function x25519sha256_keypair(a: number, b: number): void;
export function x25519sha256_keypair_from_seed(a: number, b: number, c: number, d: number): void;
export function x25519sha256_getPublicKey(a: number, b: number, c: number): void;
export function x25519sha256_computeSharedSecret(a: number, b: number, c: number, d: number): void;
export function __wbg_wasmprivatekey_free(a: number): void;
export function wasmpublickey_new(a: number, b: number, c: number): void;
export function __wbg_nonce_free(a: number): void;
export function signature_toBytes(a: number, b: number): void;
export function proofofpossession_toBytes(a: number, b: number): void;
export function __wbg_keypair_free(a: number): void;
export function __wbg_noncredentialschema_free(a: number): void;
export function ecdsasecp256k1sha256_new(): number;
export function ecdhsecp256k1sha256_new(): number;
export function x25519sha256_new(): number;
export function __wbg_issuer_free(a: number): void;
export function __wbg_prover_free(a: number): void;
export function __wbg_ursaencryptor_free(a: number): void;
export function __wbg_ecdsasecp256k1sha256_free(a: number): void;
export function __wbg_ecdhsecp256k1sha256_free(a: number): void;
export function __wbg_x25519sha256_free(a: number): void;
export function noncredentialschema_new(): number;
export function credentialvalues_new(): number;
export function __wbg_tail_free(a: number): void;
export function __wbg_witness_free(a: number): void;
export function noncredentialschema_addAttr(a: number, b: number, c: number): void;
export function subproofrequest_addRevealedAttribute(a: number, b: number, c: number): void;
export function __wbg_verkey_free(a: number): void;
export function __wbg_signature_free(a: number): void;
export function __wbg_proofofpossession_free(a: number): void;
export function __wbg_generator_free(a: number): void;
export function __wbg_wasmpublickey_free(a: number): void;
export function __wbg_wasmsessionkey_free(a: number): void;
export function signature_fromBytes(a: number, b: number, c: number): void;
export function proofofpossession_fromBytes(a: number, b: number, c: number): void;
export function __wbindgen_malloc(a: number): number;
export function __wbindgen_realloc(a: number, b: number, c: number): number;
export function __wbindgen_add_to_stack_pointer(a: number): number;
export function __wbindgen_free(a: number, b: number): void;
export function __wbindgen_exn_store(a: number): void;
